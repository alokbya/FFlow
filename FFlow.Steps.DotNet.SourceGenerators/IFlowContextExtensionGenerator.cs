using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FFlow.Steps.DotNet.SourceGenerators;

[Generator]
public class FlowContextExtensionsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var stepClasses = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => IsDotnetStepType(node),
                transform: static (ctx, _) => GetDotnetStepType(ctx))
            .Where(static x => x is not null);

        context.RegisterSourceOutput(stepClasses, (spc, step) =>
        {
            var source = GenerateExtension((DotnetStepType)step!);
            spc.AddSource($"{((DotnetStepType)step!).StepName}FlowContextExtensions.g.cs", SourceText.From(source, Encoding.UTF8));
        });
    }

    static bool IsDotnetStepType(SyntaxNode node)
        => node is ClassDeclarationSyntax cds &&
           cds.AttributeLists.SelectMany(al => al.Attributes)
               .Any(attr => attr.Name.ToString() == "DotnetStep");

    static DotnetStepType? GetDotnetStepType(GeneratorSyntaxContext ctx)
    {
        if (ctx.Node is not ClassDeclarationSyntax cls)
            return null;

        var name = cls.Identifier.Text;

        var attr = cls.AttributeLists.SelectMany(al => al.Attributes)
            .FirstOrDefault(a => a.Name.ToString() == "DotnetStep");

        if (attr == null) return null;

        return new DotnetStepType(name, null, null);
    }

    static string GenerateExtension(DotnetStepType step)
    {
        var stepClass = step.StepClass;
        var methodName = $"Get{stepClass.Replace("Step", "")}Output"; // or customize if you want
        var resultClass = stepClass.Replace("Step", "Result");

        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("using FFlow.Core;");
        sb.AppendLine("namespace FFlow.Steps.DotNet;");
        sb.AppendLine();
        sb.AppendLine("public static partial class IFlowContextExtensions");
        sb.AppendLine("{");
        sb.AppendLine($"    public static {resultClass} {methodName}(this IFlowContext context)");
        sb.AppendLine("    {");
        sb.AppendLine($"        return context.GetOutputFor<{stepClass}, {resultClass}>();");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}

