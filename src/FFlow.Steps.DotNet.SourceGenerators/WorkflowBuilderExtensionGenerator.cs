using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FFlow.Steps.DotNet.SourceGenerators;

[Generator]
public class WorkflowBuilderExtensionGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
            ctx.AddSource("DotnetStepAttribute.g.cs",
                SourceText.From(SourceGenerationHelper.MarkerAttribute, Encoding.UTF8)));

        var stepClasses = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => IsDotnetStepType(s),
                transform: static (ctx, _) => GetDotnetStepType(ctx))
            .Where(static x => x is not null);

        context.RegisterSourceOutput(stepClasses, static (spc, stepType) =>
        {
            var source = GenerateExtensions((DotnetStepType)stepType!);
            spc.AddSource($"{((DotnetStepType)stepType!).StepName}Extensions.g.cs",
                SourceText.From(source, Encoding.UTF8));
        });
    }

    private static bool IsDotnetStepType(SyntaxNode node)
        => node is ClassDeclarationSyntax cds &&
           cds.AttributeLists.SelectMany(x => x.Attributes).Any(attr => attr.Name.ToString() == "DotnetStep");

    private static DotnetStepType? GetDotnetStepType(GeneratorSyntaxContext context)
    {
        if (context.Node is not ClassDeclarationSyntax classDecl)
            return null;

        var name = classDecl.Identifier.Text;

        var attr = classDecl.AttributeLists.SelectMany(al => al.Attributes)
            .FirstOrDefault(a => a.Name.ToString() == "DotnetStep");

        if (attr == null) return null;

        // Retrieve parameter/property name from attribute args if any
        string? stringParam = null;
        string? stringProperty = null;

        if (attr.ArgumentList is { Arguments.Count: >= 2 })
        {
            stringParam = attr.ArgumentList.Arguments[0].ToString().Trim('"');
            stringProperty = attr.ArgumentList.Arguments[1].ToString().Trim('"');
        }

        return new DotnetStepType(name, stringParam, stringProperty);
    }

    private static string GenerateExtensions(DotnetStepType step)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("using FFlow.Core;");
        sb.AppendLine("namespace FFlow.Steps.DotNet;");
        sb.AppendLine();
        sb.AppendLine("public static partial class IWorkflowBuilderExtensions");
        sb.AppendLine("{");

        sb.AppendLine($$"""
                            /// <summary>
                            /// Adds a <see cref="{{step.StepClass}}"/> to the workflow and allows configuration via delegate.
                            /// </summary>
                            /// <param name="builder">The workflow builder.</param>
                            /// <param name="configure">An action to configure the <see cref="{{step.StepClass}}"/>.</param>
                            /// <returns>The step builder for further configuration.</returns>
                            public static IConfigurableStepBuilder {{step.MethodName}}(this IWorkflowBuilder builder,
                                Action<{{step.StepClass}}> configure)
                            {
                                var step = new {{step.StepClass}}();
                                configure?.Invoke(step);
                                return builder.AddStep(step);
                            }
                        """);

        if (!string.IsNullOrEmpty(step.StringParam) && !string.IsNullOrEmpty(step.StringProperty))
        {
            sb.AppendLine($$"""
                                /// <summary>
                                /// Adds a <see cref="{{step.StepClass}}"/> to the workflow for the specified <paramref name="{{step.StringParam}}"/>,
                                /// and allows optional configuration via delegate.
                                /// </summary>
                                /// <param name="builder">The workflow builder.</param>
                                /// <param name="{{step.StringParam}}">The {{step.StringParam}} value.</param>
                                /// <param name="configure">An optional action to configure the <see cref="{{step.StepClass}}"/>.</param>
                                /// <returns>The step builder for further configuration.</returns>
                                /// <exception cref="ArgumentException">Thrown if <paramref name="{{step.StringParam}}"/> is null or empty.</exception>
                                public static IConfigurableStepBuilder {{step.MethodName}}(this IWorkflowBuilder builder, string {{step.StringParam}},
                                    Action<{{step.StepClass}}>? configure = null)
                                {
                                    if (string.IsNullOrEmpty({{step.StringParam}}))
                                        throw new ArgumentException("Value cannot be null or empty.", nameof({{step.StringParam}}));

                                    var step = new {{step.StepClass}} { {{step.StringProperty}} = {{step.StringParam}} };
                                    configure?.Invoke(step);
                                    return builder.AddStep(step);
                                }
                            """);
        }

        sb.AppendLine("}");
        return sb.ToString();
    }
}